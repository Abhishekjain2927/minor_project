  <%= form_with(model: doctor, local: true) do |form| %>
  <% if doctor.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(doctor.errors.count, "error") %> prohibited this doctor from being saved:</h2>

      <ul>
      <% doctor.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :first_name %>
    <%= form.text_field :first_name, id: :doctor_first_name , :class => "form-control"%>
  </div>

  <div class="field">
    <%= form.label :last_name %>
    <%= form.text_field :last_name, id: :doctor_last_name, :class => "form-control" %>
  </div>

  <div class="field">
    <%= form.label :email %>
    <%= form.text_field :email, id: :doctor_email, :class => "form-control" %>
  </div>

  <div class="field">
    <%= form.label :mobile_number %>
    <%= form.number_field :mobile_number,min: 0, id: :doctor_mobile_number , :class => "form-control"%>
  </div>

  <div class="field">
    <%= form.label :specalist_in %>
    <%= form.select :specalist_in,
    (["Diabities","cancer","Heart","lungs","Dehydration","sickness","Asthma","Digestive_system_disorder"]) %>
  </div>

  <div class="field">
    <%= form.label :gender %>
    <%= form.select :gender, (["Male","Female"]) %>
  </div>

  <div class="field">
    <%= form.label :city %>
    <%= form.text_field :city, id: :doctor_city, :class => "form-control" %>
  </div>

  <div class="field">
    <%= form.label :state %>
    <%= form.text_field :state, id: :doctor_state, :class => "form-control" %>
  </div>

  
<p>
     <%= form.label :address %>
  <%= form.text_field :address, :class => "form-control", id: "autocomplete", 
          onFocus: "geolocate()"  %></p>
   
  <p>
    <%= form.submit %>
  </p>
 
<% end %>


<script>

  var placeSearch, autocomplete;
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
          /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
          {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>

 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBbpehQ6J1am720EvBizzYo0oyadmn-SNg&libraries=places&callback=initAutocomplete"
    async defer></script>
